from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import os
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InputFile, InputMedia
from config_reader import config
import bd

storage = MemoryStorage()


class Test_one(StatesGroup):
    color_eyes = State()


# –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
start_test = KeyboardButton(text='–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç')
consultation = KeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
keybd_move = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False).add(
    start_test, consultation)

btn_1 = InlineKeyboardMarkup(text='–∫–∞—Ä–∏–π', callback_data='c_k')
btn_2 = InlineKeyboardMarkup(text='–≥–æ–ª—É–±–æ–π', callback_data='c_g')
btn_3 = InlineKeyboardMarkup(text='—Å–µ—Ä—ã–π', callback_data='c_s')
btn_4 = InlineKeyboardMarkup(text='–∑–µ–ª–µ–Ω—ã–π', callback_data='c_z')
keybd_test_1 = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    btn_1, btn_2, btn_3, btn_4
)

like = InlineKeyboardMarkup(text='üî•', callback_data='reaction_l')
dislike = InlineKeyboardMarkup(text='ü§¢', callback_data='reaction_d')
keybd_reaction = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(like, dislike)

yes = InlineKeyboardMarkup(text='–î–∞‚úÖ', callback_data='yes')
keybd_yes = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    yes
)

sub = InlineKeyboardMarkup(text='–ü–æ–¥–ø–∏—Å–∞–ª–∞—Å—åüëå', callback_data='sub')
keybd_sub = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    sub
)

bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher(bot, storage=storage)


# –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
@dp.message_handler(commands='start')
async def command_start(message: types.Message):
    try:
        if (not await bd.user_exists(message.from_user.id)):
            await bd.add_user(message.from_user.id, str(message.from_user.first_name))
        photo_res = InputFile('start.JPG')
        await bot.send_photo(message.from_user.id, photo=photo_res, caption='–ü—Ä–∏–≤–µ—Ç!\n'
                                                                            '–†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É\n'
                                                                            '–Ø –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞–∫–∏—è–∂–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –∏ —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å–µ —Ç–æ–Ω–∫–æ—Å—Ç–∏ üòä')
        await bot.send_message(message.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ü–≤–µ—Ç –≥–ª–∞–∑.',
                               reply_markup=keybd_move)
    except:
        print(str(Exception))
        await message.reply('–û—à–∏–±–∫–∞')


@dp.message_handler(lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', state=None)
async def keywords(message: types.Message):
    # —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ, –Ω–µ –¥–∞–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    await Test_one.color_eyes.set()
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç –≥–ª–∞–∑", reply_markup=keybd_test_1)


@dp.callback_query_handler(Text(startswith=('c_')), state=Test_one.color_eyes)
async def choose_color(callback_query: types.CallbackQuery, state: FSMContext):
    ans = callback_query.data
    itog = ''
    if ans == 'c_k':
        itog = '–∫–∞—Ä–∏–π'
        await bot.send_message(callback_query.from_user.id, '–°–æ–≤–µ—Ç –¥–ª—è –∫–∞—Ä–∏–≥–ª–∞–∑—ã—Ö')
    elif ans == 'c_g':
        itog = '–≥–æ–ª—É–±–æ–π'
        await bot.send_message(callback_query.from_user.id, '–°–æ–≤–µ—Ç –¥–ª—è –≥–æ–ª—É–±–æ–≥–ª–∞–∑—ã—Ö')
    elif ans == 'c_s':
        itog = '—Å–µ—Ä—ã–π'
        await bot.send_message(callback_query.from_user.id, '–°–æ–≤–µ—Ç –¥–ª—è —Å–µ—Ä–æ–≥–ª–∞–∑—ã—Ö')
    elif ans == 'c_z':
        itog = '–∑–µ–ª–µ–Ω—ã–π'
        await bot.send_message(callback_query.from_user.id, '–°–æ–≤–µ—Ç –¥–ª—è –∑–µ–ª—ë–Ω–æ–≥–ª–∞–∑—ã—Ö')
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫ –≤–∞–º —Å–æ–≤–µ—Ç?', reply_markup=keybd_reaction)
    await bot.send_message(callback_query.from_user.id, '–ü–æ–¥–æ–±—Ä–∞—Ç—å –µ—â–µ —Å–æ–≤–µ—Ç–∏–∫?', reply_markup=keybd_yes)
    await state.finish()


@dp.callback_query_handler(Text(startswith=('reaction')))
async def reaction(callback_query: types.CallbackQuery):
    ans = callback_query.data
    print(ans)


@dp.callback_query_handler(Text(startswith=('yes')))
async def btn_yes(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           '–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–æ–≤–µ—Ç, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n https://t.me/dfgfdw32',
                           reply_markup=keybd_sub)


@dp.callback_query_handler(Text(startswith=('sub')))
async def btn_sub(callback_query: types.CallbackQuery):
    user_channel_status = await bot.get_chat_member(chat_id='@dfgfdw32', user_id=callback_query.from_user.id)
    if user_channel_status["status"] != 'left':
        await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', reply_markup=keybd_move)
    else:
        await bot.send_message(callback_query.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞',
                               reply_markup=keybd_sub)


executor.start_polling(dp, skip_updates=True)
